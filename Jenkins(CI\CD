# ⚙️ Jenkins – CI/CD Automation Server

## 📝 Overview

**Jenkins** is an open-source automation server written in Java. It's one of the most widely used DevOps tools for **Continuous Integration (CI)** and **Continuous Delivery/Deployment (CD)**. Jenkins allows you to build, test, and deploy applications automatically, improving software quality and reducing manual overhead.

---

## 🚀 Key Features

- Extensible with 1,800+ plugins
- Supports **pipeline as code** (Jenkinsfile)
- Integrates with tools like Git, Docker, Maven, Kubernetes, Ansible, etc.
- Scalable with master-agent architecture
- Web-based GUI and REST APIs

---

## ⚡ Common Use Cases

- Automate **build-test-deploy** workflows
- Integrate with **GitHub/GitLab** for code changes
- Trigger builds on **pull requests or commits**
- Run **test suites**, generate reports, send notifications
- Use **Docker/Kubernetes agents** for isolated builds

---

## ⚡  Continuous Integration (CI) & Continuous Deployment (CD)
●
## Jenkins (pipelines, declarative scripts)
## Jenkins Installation (Ubuntu)

# Install Java (Jenkins requires Java)
sudo apt update && sudo apt install -y openjdk-17-jdk
# Add Jenkins repository & install Jenkins
wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee
/usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]
https://pkg.jenkins.io/debian-stable binary/" | sudo tee
/etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt update && sudo apt install -y jenkins
# Start & Enable Jenkins
sudo systemctl enable --now jenkins
# Check Jenkins status
sudo systemctl status jenkins
# Access Jenkins UI at http://your-server-ip:8080
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
1. Basic Jenkins Commands
systemctl start jenkins systemctl stop jenkins systemctl restart jenkins systemctl status jenkins journalctl -u jenkins -f # Start Jenkins service
# Stop Jenkins service
# Restart Jenkins service
# Check Jenkins service status
# View real-time logs
2. Jenkins CLI Commands
java -jar jenkins-cli.jar -s http://localhost:8080 list-jobs # List all jobs
java -jar jenkins-cli.jar -s http://localhost:8080 build <job-name> # Trigger a job
java -jar jenkins-cli.jar -s http://localhost:8080 delete-job <job-name> # Delete a
job
java -jar jenkins-cli.jar -s http://localhost:8080 enable-job <job-name> # Enable a
job
java -jar jenkins-cli.jar -s http://localhost:8080 disable-job <job-name> # Disable a
job
java -jar jenkins-cli.jar -s http://localhost:8080 who-am-i # Show current user info
3. Jenkins Environment Variables
JENKINS
_
HOME # Jenkins home directory
BUILD
NUMBER # Current build number
_
JOB
NAME # Job name
_
WORKSPACE # Workspace directory
GIT
COMMIT # Git commit hash of the build
_
BUILD
NODE
URL # URL of the build
_
_
NAME # Name of the node the build is running on
4. Jenkins Pipeline (Declarative)
groovy
pipeline {
agent any
environment {
APP
_
ENV = 'production'
}
stages {
stage('Checkout') {
steps {
git 'https://github.com/your-repo.git'
}
}
stage('Build') {
steps {
sh 'mvn clean package'
}
}
stage('Test') {
steps {
sh 'mvn test'
}
}
stage('Deploy') {
steps {
sh 'scp target/*
.jar user@server:/deploy/'
}
}
}
}
5. Jenkins Pipeline (Scripted)
groovy
node {
stage('Checkout') {
git 'https://github.com/your-repo.git'
}
stage('Build') {
sh 'mvn clean package'
}
stage('Test') {
sh 'mvn test'
}
stage('Deploy') {
sh 'scp target/*
.jar user@server:/deploy/'
}
}
